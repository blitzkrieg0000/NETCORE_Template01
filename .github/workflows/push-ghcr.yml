name: Build & Push To GHCR

on:
  push:
    branches: none # [ main ]
    tags: none # [ 'v*.*.*' ]

  # Manuel çalıştırmak için
  workflow_dispatch:


env:
  WORKDIR: WebAppOnion
  REGISTRY: ghcr.io
  IMAGE_NAME: blitzkrieg0000/myproject  # ${{ github.repository }}
  IMAGE_TAG: 1.0.${{ github.run_number }}         # Otomatik repository version numarası arttırma
  ConnectionStrings__Default: Host=aspnetcore_postgresql;Database=aspnetcore;Username=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }};Pooling=false;Timeout=300;CommandTimeout=300


jobs:
  build-push:
    runs-on: ubuntu-latest


    permissions:
      contents: read
      packages: write
      id-token: write # Pull Requestlerin dışında çalışırken sigstore/fulcio ile kimlik sorgulamasını tamamlamak için kullanılır.


    steps:
      - name: 1-Checkout project to workspace
        uses: actions/checkout@v3


      - name: 2-Install Cosign tool
        uses: sigstore/cosign-installer@main


      - name: 3-Install docker Buildx
        uses: docker/setup-buildx-action@v1
      

      - name: 4-Login container registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: 5-Install docker metadata tool
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      

      - name: echo
        run: |
          echo "Tag: ${{steps.meta.outputs.tags}}"
          echo "Labels: ${{steps.meta.outputs.labels}}"
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"

      # - name: 6-Build and push docker image (if !PR)
      #   id: build_and_push
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ${{ env.WORKDIR }}
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }} #! Tag: ${{ env.IMAGE_TAG }}
      #     labels: ${{ steps.meta.outputs.labels }}
        
